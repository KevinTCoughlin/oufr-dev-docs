### YamlMime:UniversalReference
items:
  - uid: office-ui-fabric-react.BaseComponent
    summary: 'BaseComponent class, which provides basic helpers for all components.'
    name: BaseComponent
    fullName: BaseComponent
    langs:
      - typeScript
    type: class
    extends:
      - React.Component
    package: office-ui-fabric-react
    children:
      - office-ui-fabric-react.BaseComponent.constructor
      - office-ui-fabric-react.BaseComponent._async
      - office-ui-fabric-react.BaseComponent._disposables
      - office-ui-fabric-react.BaseComponent._events
      - office-ui-fabric-react.BaseComponent._resolveRef
      - office-ui-fabric-react.BaseComponent._skipComponentRefResolution
      - office-ui-fabric-react.BaseComponent._updateComponentRef
      - office-ui-fabric-react.BaseComponent._warnConditionallyRequiredProps
      - office-ui-fabric-react.BaseComponent._warnDeprecations
      - office-ui-fabric-react.BaseComponent._warnMutuallyExclusive
      - office-ui-fabric-react.BaseComponent.className
      - office-ui-fabric-react.BaseComponent.componentDidMount
      - office-ui-fabric-react.BaseComponent.componentWillReceiveProps
      - office-ui-fabric-react.BaseComponent.componentWillUnmount
      - office-ui-fabric-react.BaseComponent.onError
  - uid: office-ui-fabric-react.BaseComponent.constructor
    summary: BaseComponent constructor
    name: 'constructor(props, context)'
    fullName: constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(props: TProps, context?: any);'
      parameters:
        - id: props
          description: The props for the component.
          type:
            - TProps
        - id: context
          description: The context for the component.
          type:
            - any
  - uid: office-ui-fabric-react.BaseComponent._async
    summary: >-
      Gets the async instance associated with the component, created on demand. The async instance gives subclasses a
      way to execute setTimeout/setInterval async calls safely, where the callbacks will be cleared/ignored
      automatically after unmounting. The helpers within the async object also preserve the this pointer so that you
      don't need to "bind" the callbacks.
    name: _async
    fullName: _async
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected readonly _async: Async;'
      return:
        type:
          - office-ui-fabric-react.Async
  - uid: office-ui-fabric-react.BaseComponent._disposables
    summary: Allows subclasses to push things to this.\_disposables to be auto disposed.
    name: _disposables
    fullName: _disposables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected readonly _disposables: IDisposable[];'
      return:
        type:
          - 'IDisposable[]'
  - uid: office-ui-fabric-react.BaseComponent._events
    summary: >-
      Gets the event group instance assocaited with the component, created on demand. The event instance provides on/off
      methods for listening to DOM (or regular javascript object) events. The event callbacks will be automatically
      disconnected after unmounting. The helpers within the events object also preserve the this reference so that you
      don't need to "bind" the callbacks.
    name: _events
    fullName: _events
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected readonly _events: EventGroup;'
      return:
        type:
          - office-ui-fabric-react.EventGroup
  - uid: office-ui-fabric-react.BaseComponent._resolveRef
    summary: Helper to return a memoized ref resolver function.
    deprecated:
      content: Use `createRef` from React.createRef.
    name: _resolveRef(refName)
    fullName: _resolveRef
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected _resolveRef(refName: string): (ref: React.ReactNode) => React.ReactNode;'
      return:
        type:
          - '(ref: React.ReactNode) => React.ReactNode'
        description: A function instance keyed from the given refname.
      parameters:
        - id: refName
          description: Name of the member to assign the ref to.
          type:
            - string
  - uid: office-ui-fabric-react.BaseComponent._skipComponentRefResolution
    summary: >-
      Controls whether the componentRef prop will be resolved by this component instance. If you are implementing a
      passthrough (higher-order component), you would set this to false and pass through the props to the inner
      component, allowing it to resolve the componentRef.
    name: _skipComponentRefResolution
    fullName: _skipComponentRefResolution
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected _skipComponentRefResolution: boolean;'
      return:
        type:
          - boolean
  - uid: office-ui-fabric-react.BaseComponent._updateComponentRef
    summary: Updates the componentRef (by calling it with "this" when necessary.)
    name: '_updateComponentRef(currentProps, newProps)'
    fullName: _updateComponentRef
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected _updateComponentRef(currentProps: IBaseProps, newProps?: IBaseProps): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: currentProps
          description: ''
          type:
            - office-ui-fabric-react.IBaseProps
        - id: newProps
          description: ''
          type:
            - office-ui-fabric-react.IBaseProps
  - uid: office-ui-fabric-react.BaseComponent._warnConditionallyRequiredProps
    summary: Warns when props are required if a condition is met.
    name: '_warnConditionallyRequiredProps(requiredProps, conditionalPropName, condition)'
    fullName: _warnConditionallyRequiredProps
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        protected _warnConditionallyRequiredProps(requiredProps: string[], conditionalPropName: string, condition:
        boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: requiredProps
          description: The name of the props that are required when the condition is met.
          type:
            - 'string[]'
        - id: conditionalPropName
          description: The name of the prop that the condition is based on.
          type:
            - string
        - id: condition
          description: Whether the condition is met.
          type:
            - boolean
  - uid: office-ui-fabric-react.BaseComponent._warnDeprecations
    summary: Warns when a deprecated props are being used.
    name: _warnDeprecations(deprecationMap)
    fullName: _warnDeprecations
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: deprecationMap
          description: 'The map of deprecations, where key is the prop name and the value is either null or a replacement prop name.'
          type:
            - ISettingsMap<TProps>
  - uid: office-ui-fabric-react.BaseComponent._warnMutuallyExclusive
    summary: Warns when props which are mutually exclusive with each other are both used.
    name: _warnMutuallyExclusive(mutuallyExclusiveMap)
    fullName: _warnMutuallyExclusive
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: mutuallyExclusiveMap
          description: The map of mutually exclusive props.
          type:
            - ISettingsMap<TProps>
  - uid: office-ui-fabric-react.BaseComponent.className
    summary: Gets the object's class name.
    name: className
    fullName: className
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly className: string;'
      return:
        type:
          - string
  - uid: office-ui-fabric-react.BaseComponent.componentDidMount
    summary: 'When the component has mounted, update the componentRef.'
    name: componentDidMount()
    fullName: componentDidMount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentDidMount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office-ui-fabric-react.BaseComponent.componentWillReceiveProps
    summary: 'When the component will receive props, make sure the componentRef is updated.'
    name: 'componentWillReceiveProps(newProps, newContext)'
    fullName: componentWillReceiveProps
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillReceiveProps(newProps: Readonly<TProps>, newContext: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newProps
          description: ''
          type:
            - Readonly<TProps>
        - id: newContext
          description: ''
          type:
            - any
  - uid: office-ui-fabric-react.BaseComponent.componentWillUnmount
    summary: 'If we have disposables, dispose them automatically on unmount.'
    name: componentWillUnmount()
    fullName: componentWillUnmount
    langs:
      - typeScript
    type: method
    syntax:
      content: 'componentWillUnmount(): void;'
      return:
        type:
          - void
        description: ''
  - uid: office-ui-fabric-react.BaseComponent.onError
    deprecated:
      content: Use React's error boundaries instead.
    name: onError
    fullName: onError
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static onError: ((errorMessage?: string, ex?: any) => void);'
      return:
        type:
          - '((errorMessage?: string, ex?: any) => void)'
